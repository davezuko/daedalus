import _defn from './internal/_defn'

/**
 * @name zipObj
 * @signature String k, Any v => [k] -> [v] -> {k:v}
 * @category Collection
 * @since v0.3.0
 * @description
 * Returns an object with keys/values generated by pairing elements of
 * the first list (of keys) with elements of the second list (of values)
 * by their position. The result is truncated to the length of the shorter
 * of the two input lists.
 * If you wish to zip  nlist of `[key, value]` pairs, use `fromPairs`.
 * @see fromPairs
 * @see zip
 *
 * @example
 * zipObj(['a', 'b', 'c'], [1, 2, 3]) // => { a: 1, b: 2, c: 3 }
 * zipObj(['a', 'b', 'c'], [1])       // => { a: 1 }
 */
export default _defn(function zipObj (ks, vs) {
  var i   = 0
    , len = Math.min(ks.length, vs.length)
    , kv  = {}

  for (; i < len; i++) {
    kv[ks[i]] = vs[i]
  }
  return kv
})
